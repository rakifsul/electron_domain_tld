{
    "version": "https://jsonfeed.org/version/1",
    "title": "RAKIFSUL ELECTRON",
    "description": "",
    "home_page_url": "https://electron.rakifsul.my.id",
    "feed_url": "https://electron.rakifsul.my.id/feed.json",
    "user_comment": "",
    "author": {
        "name": "RAKIFSUL"
    },
    "items": [
        {
            "id": "https://electron.rakifsul.my.id/studi-kasus-electron-membuat-aplikasi-video-player.html",
            "url": "https://electron.rakifsul.my.id/studi-kasus-electron-membuat-aplikasi-video-player.html",
            "title": "Studi Kasus Electron - Membuat Aplikasi Video Player",
            "summary": "File video adalah file yang jika dibuka dengan aplikasi video player akan menampilkan suatu kumpulan frame gambar yang bergerak seiring waktu. Contoh yang paling mudah adalah file .mp4. Jika Anda membuka file .mp4 dengan video player yang dapat memainkan file .mp4, maka akan tampil video-nya.",
            "content_html": "<p>File video adalah file yang jika dibuka dengan aplikasi video player akan menampilkan suatu kumpulan frame gambar yang bergerak seiring waktu.</p>\n<p>Contoh yang paling mudah adalah file .mp4.</p>\n<p>Jika Anda membuka file .mp4 dengan video player yang dapat memainkan file .mp4, maka akan tampil video-nya.</p>\n<p>Video adalah sebuah media yang banyak gunanya.</p>\n<p>Mulai dari hiburan hingga edukasi bisa menggunakan video.</p>\n<p>Untuk memainkan video, dibutuhkan suatu aplikasi.</p>\n<p>Yaitu aplikasi yang dapat menampilkan format file video.</p>\n<p>Saat ini, sudah cukup banyak aplikasi pemutar video yang ada di pasaran.</p>\n<p>Teknologi yang digunakan untuk membuatnya pun cukup beragam.</p>\n<p>Electron adalah salah satunya.</p>\n<p>Anda pasti tahu bahwa web browser saat ini bisa memainkan video.</p>\n<p>Electron pun bisa dianggap sebagai web browser.</p>\n<p>Maka tidak aneh juga jika Electron menyediakan fitur untuk memainkan video.</p>\n<p>Dan, memang faktanya demikian.</p>\n<p>Bahkan, pembuatan aplikasi video player di Electron hanya memerlukan sedikit baris kode.</p>\n<p>Bagaimana kita bisa membuat aplikasi video player dengan Electron? Itulah yang akan dibahas dalam studi kasus kali ini.</p>\n<p>Dalam studi kasus ini, saya juga akan memperkenalkan sebuah library CSS bernama Metro UI.</p>\n<p>Metro memiliki fitur yang cukup lengkap, salah satunya adalah untuk membuat elemen video player yang sudah memiliki controller-nya.</p>\n<p>Untuk membaca studi kasus ini, Anda harus membelinya dengan klik tombol di bawah.</p>\n<p>Disclaimer:</p>\n<ul>\n<li>Source code hanya teruji di Windows 11 dan tidak dijamin akan berjalan dengan benar.</li>\n<li>Saya tidak menjamin bahwa Anda akan paham dengan isi studi kasus ini.</li>\n</ul>\n<p class=\"align-center\"><a class=\"btn coba\" style=\"width: 100%;\" href=\"javascript:void(0);\" rel=\"nofollow noopener noreferrer\">belum tersedia</a></p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Studi Kasus"
            ],
            "date_published": "2023-11-26T01:41:48+07:00",
            "date_modified": "2023-11-26T02:24:53+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/beberapa-cara-mem-package-aplikasi-electron.html",
            "url": "https://electron.rakifsul.my.id/beberapa-cara-mem-package-aplikasi-electron.html",
            "title": "Beberapa Cara Mem-package Aplikasi Electron",
            "summary": "Coding Electron bisa menjadi aktifitas yang menyenangkan. Dengan Electron kita bisa membuat berbagai jenis aplikasi desktop mulai dari yang paling sederhana seperti password generator hingga yang paling rumit seperti aplikasi WhatsApp marketing. Selain itu, aplikasi Electron yang sudah selesai juga bisa berjalan secara portable. Artinya&hellip;",
            "content_html": "<p>Coding Electron bisa menjadi aktifitas yang menyenangkan.</p>\n<p>Dengan Electron kita bisa membuat berbagai jenis aplikasi desktop mulai dari yang paling sederhana seperti password generator hingga yang paling rumit seperti aplikasi WhatsApp marketing.</p>\n<p>Selain itu, aplikasi Electron yang sudah selesai juga bisa berjalan secara portable.</p>\n<p>Artinya penggunaan installer, walaupun memungkinkan, tidak diharuskan.</p>\n<p>Lalu, apa sajakah cara-cara mem-package aplikasi Electron setelah selesai dibuat?</p>\n<h2>1. Mem-package Aplikasi Electron dengan Electron Builder</h2>\n<p>Electron Builder adalah sebuah tool untuk mem-package aplikasi Electron dari Loopline Systems.</p>\n<p>Tool ini memiliki fitur yang cukup lengkap dan bisa mem-build untuk Windows, Mac OS dan Linux.</p>\n<p>Di windows misalnya, mem-package Electron dengan Electron Builder bisa menghasilkan file installer dengan sangat mudah.</p>\n<p>Selain itu ada fitur code signing dan auto update-nya.</p>\n<p>Kekurangan dari tool ini adalah untuk mem-build aplikasi Electron untuk suatu sistem operasi, maka kita perlu menjalankannya dari sistem operasi tersebut, kecuali jika kita mau menggunakan virtual machine atau menggunakan layanan web pihak ketiga.</p>\n<h2>2. Mem-package Aplikasi Electron dengan Electron Packager</h2>\n<p>Electron Packager adalah sebuah tool untuk mem-package aplikasi Electron dari Max Ogden dan kontributornya.</p>\n<p>Perbedaannya dengan Electron Builder adalah, Electron Packager tidak menghasilkan installer, melainkan executable folder.</p>\n<p>Folder tersebut selanjutnya bisa di-zip, kemudian didistribusikan.</p>\n<p>Untuk di Windows sendiri, kita bisa menggunakan NSIS secara manual untuk mem-package folder tadi menjadi sebuah installer.</p>\n<p>Tool ini bisa mem-build untuk Windows, Mac OS, dan Linux.</p>\n<p>Kekurangannya adalah kita tidak bisa atau akan menjadi sulit jika menggunakan dependency yang menggunakan bahasa C++ pada aplikasi Electron kita.</p>\n<p>Walaupun begitu, tenang saja, karena di npmjs masih banyak modul yang tidak berbahasa C++ dan tidak perlu di-compile dulu.</p>\n<h2>3. Mem-package Aplikasi Electron dengan Electron Forge</h2>\n<p>Electron Forge adalah sebuah tool untuk mem-package aplikasi Electron dari Samuel Attard</p>\n<p>Tool ini masih menyerupai Electron Packager, tapi ada fitur code signing dan installer-nya.</p>\n<h2>4. Mem-package Aplikasi Electron dengan Prebuilt Binary</h2>\n<p>Cara ini adalah cara mem-package aplikasi Electron secara manual.</p>\n<p>Intinya, folder aplikasi yang kita buat dimasukkan ke dalam folder resource dari binary-nya Electron.</p>\n<p>Selanjutnya, kita bisa memilih apakah folder aplikasi tersebut akan di-pack ke format file .asar atau tidak.</p>\n<p>Setelah hal tadi dilakukan dan menghasilkan aplikasi Electron yang portable, kita bisa menggunakan NSIS secara manual untuk mem-build installer-nya di Windows.</p>\n<h2>Akhir Kata</h2>\n<p>Nah, ternyata banyak juga tool untuk mem-package aplikasi Electron.</p>\n<p>Sekarang, giliran Anda menambahkan daftar tadi dan bereksperimen dengannya.</p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Lain-Lain"
            ],
            "date_published": "2023-11-23T17:52:39+07:00",
            "date_modified": "2023-11-23T18:19:28+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-webview-tag.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-webview-tag.html",
            "title": "Belajar Electron - Pembahasan tentang webview Tag",
            "summary": "Pendahuluan Dengan maraknya framework untuk me-render DOM melalui JavaScript seperti React, Vue dan sebagainya, maka pembuatan aplikasi scraper menjadi semakin menantang. Dulu, HTML bersifat statis atau setidaknya apa adanya sehingga untuk melakukan ekstraksi data cukup dengan menggunakan library untuk request HTTP biasa. Tapi bayangkan jika&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Dengan maraknya framework untuk me-render DOM melalui JavaScript seperti React, Vue dan sebagainya, maka pembuatan aplikasi scraper menjadi semakin menantang.</p>\n<p>Dulu, HTML bersifat statis atau setidaknya apa adanya sehingga untuk melakukan ekstraksi data cukup dengan menggunakan library untuk request HTTP biasa.</p>\n<p>Tapi bayangkan jika dalam sebuah website cuma ada tag div yang diisi struktur HTML via JavaScript. Itu sangat merepotkan.</p>\n<p>Untuk melakukan scraping pada website semacam itu biasanya dibutuhkan web automation seperti Selenium dan Puppeteer.</p>\n<p>Tapi menurut saya itu kurang ideal karena bersifat terpisah dari aplikasi utamanya.</p>\n<p>Untungnya, di Electron ada webview tag.</p>\n<p>Webview tag tersebut berperan sebagaimana web browser yang bisa memproses JavaScript dan mem-parse DOM yang dibuatnya.</p>\n<p>Webview tag ini benar-benar menyerupai web browser pada umumnya, bahkan bisa melakukan inspect element atau membuka devtools.</p>\n<p>Pada Electron versi terbaru, saat ini juga ada alternatif webview tag yang bernama BrowserView.</p>\n<p>Bedanya, BrowserView merupakan bagian dari main process sementara webview tag merupakan bagian dari renderer process.</p>\n<p>Namun, di sini saya tidak membahas BrowserView, melainkan webview tag.</p>\n<p>Mungkin di lain kesempatan saya akan membahasnya.</p>\n<p>Sekarang, mari kita pelajari apa itu webview tag dan bagaimana cara menggunakannya untuk membuat aplikasi web browser sederhana.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami apa itu webview tag.</li>\n<li>Pembaca dapat menggunakan webview tag untuk membuat web browser sederhana.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah sebuah project Electron dengan nama \"project-electron-webview\".</p>\n<p>Anda bisa membuatnya dengan cara yang dijelaskan pada <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial sebelumnya</a>.</p>\n<p>Jika Anda telah mengikuti tutorial tersebut, pasti ada file bernama \"index.js\" di dalam folder project Anda.</p>\n<p>Bukalah file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst { app, BrowserWindow } = require(\"electron\");\n// end: import modules\n\n// variabel untuk menyimpan objek BrowserWindow\nlet win;\n\n// saat app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow berukuran 1024x768\n    // enable fitur webview tag\n    win = new BrowserWindow({\n        width: 1024,\n        height: 768,\n        webPreferences: {\n            webviewTag: true,\n        },\n    });\n\n    // buka file index.html\n    win.loadFile(\"index.html\");\n});</code></pre>\n<p>Selanjutnya, buat file \"index.html\" dan isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;WebView Tag Example&lt;/title&gt;\n\n  &lt;style&gt;\n    #wv-main {\n      position: absolute;\n      width: 50%;\n      top: 0px;\n      bottom: 0px;\n    }\n\n    #control {\n      position: absolute;\n      width: 50%;\n      left: 52%;\n      top: 0px;\n      bottom: 0px;\n      overflow-y: scroll;\n    }\n\n    #control input {\n      left: 50%;\n      width: 95%;\n    }\n\n    #control textarea {\n      left: 50%;\n      width: 95%;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;webview id=\"wv-main\" src=\"https://github.com\"&gt;&lt;/webview&gt;\n  &lt;div id=\"control\"&gt;\n    &lt;h1&gt;Control&lt;/h1&gt;\n    &lt;label for=\"url\"&gt;URL&lt;/label&gt;\n    &lt;br&gt;\n    &lt;input type=\"text\" id=\"url\" value=\"https://www.google.com\" placeholder=\"Masukkan URL di sini!\" /&gt;\n    &lt;br&gt;\n    &lt;button id=\"load-url\"&gt;Load URL&lt;/button&gt;\n    &lt;button id=\"go-back\"&gt;Go Back&lt;/button&gt;\n    &lt;button id=\"go-forward\"&gt;Go Forward&lt;/button&gt;\n    &lt;button id=\"stop\"&gt;Stop&lt;/button&gt;\n    &lt;button id=\"reload\"&gt;Reload&lt;/button&gt;\n    &lt;button id=\"open-dev-tools\"&gt;Open Dev Tools&lt;/button&gt;\n\n    &lt;p&gt;&lt;/p&gt;\n\n    &lt;label for=\"script\"&gt;Script&lt;/label&gt;\n    &lt;br&gt;\n    &lt;textarea id=\"script\" rows=\"10\" cols=\"50\"&gt;window.open(\"https://www.google.com/search?q=site%3Asfrfrlnc.com\",\"_self\");0&lt;/textarea&gt;\n    &lt;br&gt;\n    &lt;button id=\"inject-script\"&gt;Inject&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n    // mengambil element untuk nantinya meng-handle event.\n    const wvMain = document.getElementById(\"wv-main\");\n    const btnLoadUrl = document.getElementById(\"load-url\");\n    const btnGoBack = document.getElementById(\"go-back\");\n    const btnGoForward = document.getElementById(\"go-forward\");\n    const btnStop = document.getElementById(\"stop\");\n    const btnReload = document.getElementById(\"reload\");\n    const btnOpenDevTools = document.getElementById(\"open-dev-tools\");\n    const btnInjectScript = document.getElementById(\"inject-script\");\n    const txaScript = document.getElementById(\"script\").value;\n\n    // saat tombol Load URL diklik\n    btnLoadUrl.onclick = function() {\n      const url = document.getElementById(\"url\").value;\n      wvMain.loadURL(url);\n    }\n\n    // saat tombol Go Back diklik\n    btnGoBack.onclick = function() {\n      wvMain.goBack();\n    }\n\n    // saat tombol Go Forward diklik\n    btnGoForward.onclick = function() {\n      wvMain.goForward();\n    }\n\n    // saat tombol Stop diklik\n    btnStop.onclick = function() {\n      wvMain.stop();\n    }\n\n    // saat tombol Reload diklik\n    btnReload.onclick = function() {\n      wvMain.reload();\n    }\n\n    // saat tombol Open Dev Tools (inspect element) diklik\n    btnOpenDevTools.onclick = function() {\n      wvMain.openDevTools();\n    }\n\n    // saat tombol Inject diklik\n    btnInjectScript.onclick = function() {\n      wvMain.executeJavaScript(txaScript);\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Sekarang, Electron siap dijalankan:</p>\n<pre>npm run dev</pre>\n<p>Nanti akan muncul BrowserWindow yang terdiri dari 2 bagian.</p>\n<p>Bagian kiri adalah web page dan bagian kanan adalah kontrolnya.</p>\n<h2>Pembahasan</h2>\n<p>Sekarang, saya akan membahas dari \"index.js\" terlebih dahulu, karena ini yang paling sederhana.</p>\n<p>Pada bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// begin: import modules\nconst { app, BrowserWindow } = require(\"electron\");\n// end: import modules</code></pre>\n<p>Kita mengimpor modul yang diperlukan.</p>\n<p>Hanya perlu app dan BrowserWindow.</p>\n<p>Selanjutnya, kita menyiapkan sebuah variabel bernama win untuk menyimpan objek BrowserWindow:</p>\n<pre class=\"language-javascript line-numbers\"><code>// variabel untuk menyimpan objek BrowserWindow\nlet win;</code></pre>\n<p>Saat app ready, buat BrowserWindow:</p>\n<pre class=\"language-javascript line-numbers\"><code>// saat app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow berukuran 1024x768\n    // enable fitur webview tag\n    win = new BrowserWindow({\n        width: 1024,\n        height: 768,\n        webPreferences: {\n            webviewTag: true,\n        },\n    });</code></pre>\n<p>Ukuran BrowserWindow-nya adalah 1024x768 pixel dengan webview tag di-enable.</p>\n<p>Gunakan parameter tersebut agar kita bisa menggunakan webview tag.</p>\n<p>Selanjutnya, buka file \"index.html\":</p>\n<pre class=\"language-javascript line-numbers\"><code>    // buka file index.html\n    win.loadFile(\"index.html\");</code></pre>\n<p>Sekarang, bagaimana dengan \"index.html\"?</p>\n<p>File tersebut saya bagi menjadi dua bagian: struktur dan script.</p>\n<p>Untuk strukturnya:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;webview id=\"wv-main\" src=\"https://github.com\"&gt;&lt;/webview&gt;\n  &lt;div id=\"control\"&gt;\n    &lt;h1&gt;Control&lt;/h1&gt;\n    &lt;label for=\"url\"&gt;URL&lt;/label&gt;\n    &lt;br&gt;\n    &lt;input type=\"text\" id=\"url\" value=\"https://www.google.com\" placeholder=\"Masukkan URL di sini!\" /&gt;\n    &lt;br&gt;\n    &lt;button id=\"load-url\"&gt;Load URL&lt;/button&gt;\n    &lt;button id=\"go-back\"&gt;Go Back&lt;/button&gt;\n    &lt;button id=\"go-forward\"&gt;Go Forward&lt;/button&gt;\n    &lt;button id=\"stop\"&gt;Stop&lt;/button&gt;\n    &lt;button id=\"reload\"&gt;Reload&lt;/button&gt;\n    &lt;button id=\"open-dev-tools\"&gt;Open Dev Tools&lt;/button&gt;\n\n    &lt;p&gt;&lt;/p&gt;\n\n    &lt;label for=\"script\"&gt;Script&lt;/label&gt;\n    &lt;br&gt;\n    &lt;textarea id=\"script\" rows=\"10\" cols=\"50\"&gt;window.open(\"https://www.google.com/search?q=site%3Asfrfrlnc.com\",\"_self\");0&lt;/textarea&gt;\n    &lt;br&gt;\n    &lt;button id=\"inject-script\"&gt;Inject&lt;/button&gt;\n  &lt;/div&gt;</code></pre>\n<p>Kita menggunakan webview tag di bagian atas kode, yang nantinya akan ada di sebelah kiri dari BrowserWindow.</p>\n<p>Adapun div di bawahnya adalah kontrol. Nantinya ada di sebelah kanan BrowserWindow.</p>\n<p>Penempatan itu tentunya dilakukan dengan CSS.</p>\n<p>Selain itu, kontrol tersebut terdiri dari beberapa tombol untuk navigasi dan sebuah textarea yang berisi script untuk melakukan injeksi JavaScript ke dalam website target.</p>\n<p>Sekarang bagian script-nya.</p>\n<p>Kodenya adalah sebagai berikut:</p>\n<pre class=\"language-html line-numbers\"><code>  &lt;script&gt;\n    // mengambil element untuk nantinya meng-handle event.\n    const wvMain = document.getElementById(\"wv-main\");\n    const btnLoadUrl = document.getElementById(\"load-url\");\n    const btnGoBack = document.getElementById(\"go-back\");\n    const btnGoForward = document.getElementById(\"go-forward\");\n    const btnStop = document.getElementById(\"stop\");\n    const btnReload = document.getElementById(\"reload\");\n    const btnOpenDevTools = document.getElementById(\"open-dev-tools\");\n    const btnInjectScript = document.getElementById(\"inject-script\");\n    const txaScript = document.getElementById(\"script\").value;\n\n    // saat tombol Load URL diklik\n    btnLoadUrl.onclick = function() {\n      const url = document.getElementById(\"url\").value;\n      wvMain.loadURL(url);\n    }\n\n    // saat tombol Go Back diklik\n    btnGoBack.onclick = function() {\n      wvMain.goBack();\n    }\n\n    // saat tombol Go Forward diklik\n    btnGoForward.onclick = function() {\n      wvMain.goForward();\n    }\n\n    // saat tombol Stop diklik\n    btnStop.onclick = function() {\n      wvMain.stop();\n    }\n\n    // saat tombol Reload diklik\n    btnReload.onclick = function() {\n      wvMain.reload();\n    }\n\n    // saat tombol Open Dev Tools (inspect element) diklik\n    btnOpenDevTools.onclick = function() {\n      wvMain.openDevTools();\n    }\n\n    // saat tombol Inject diklik\n    btnInjectScript.onclick = function() {\n      wvMain.executeJavaScript(txaScript);\n    }\n  &lt;/script&gt;</code></pre>\n<p>Di bagian ini, kita mengambil elemen-elemen kontrol dengan getElementById:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // mengambil element untuk nantinya meng-handle event.\n    const wvMain = document.getElementById(\"wv-main\");\n    const btnLoadUrl = document.getElementById(\"load-url\");\n    const btnGoBack = document.getElementById(\"go-back\");\n    const btnGoForward = document.getElementById(\"go-forward\");\n    const btnStop = document.getElementById(\"stop\");\n    const btnReload = document.getElementById(\"reload\");\n    const btnOpenDevTools = document.getElementById(\"open-dev-tools\");\n    const btnInjectScript = document.getElementById(\"inject-script\");\n    const txaScript = document.getElementById(\"script\").value;</code></pre>\n<p>Event handler-nya ada di sini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // saat tombol Load URL diklik\n    btnLoadUrl.onclick = function() {\n      const url = document.getElementById(\"url\").value;\n      wvMain.loadURL(url);\n    }\n\n    // saat tombol Go Back diklik\n    btnGoBack.onclick = function() {\n      wvMain.goBack();\n    }\n\n    // saat tombol Go Forward diklik\n    btnGoForward.onclick = function() {\n      wvMain.goForward();\n    }\n\n    // saat tombol Stop diklik\n    btnStop.onclick = function() {\n      wvMain.stop();\n    }\n\n    // saat tombol Reload diklik\n    btnReload.onclick = function() {\n      wvMain.reload();\n    }\n\n    // saat tombol Open Dev Tools (inspect element) diklik\n    btnOpenDevTools.onclick = function() {\n      wvMain.openDevTools();\n    }\n\n    // saat tombol Inject diklik\n    btnInjectScript.onclick = function() {\n      wvMain.executeJavaScript(txaScript);\n    }</code></pre>\n<p>Sepertinya komentar di atas cukup menjelaskan apa yang terjadi.</p>\n<p>Untuk bagian injeksi script, teks script yang akan diinjeksi ada di variabel txaScript yang isinya berasal dari elemen textarea di bagian strukturnya.</p>\n<p>Perhatikan bahwa webview sudah memiliki sebagian besar API yang dibutuhkan.</p>\n<p>Yang artinya, pembuatan aplikasi ini semakin mudah.</p>\n<h2>Penutup</h2>\n<p>Sekarang, seharusnya Anda telah memahami apa itu webview tag dan bagaimana cara menggunakannya untuk membuat web browser sederhana.</p>\n<p>Selanjutnya giliran Anda untuk mengembangkannya lebih lanjut.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-23T03:37:34+07:00",
            "date_modified": "2023-11-25T00:29:33+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-mengenal-tray.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-mengenal-tray.html",
            "title": "Belajar Electron - Mengenal Tray",
            "summary": "Pendahuluan Tray itu apa? Tray adalah icon interaktif yang berada pada taskbar dari Windows 11 yang biasanya ada di sekitar pojok kanan bawah dari layar komputer. Pada Windows 11, tray dari aplikasi yang belum pernah dijalankan sebelumnya tersembunyi di balik icon panah ke atas yang&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Tray itu apa?</p>\n<p>Tray adalah icon interaktif yang berada pada taskbar dari Windows 11 yang biasanya ada di sekitar pojok kanan bawah dari layar komputer.</p>\n<p>Pada Windows 11, tray dari aplikasi yang belum pernah dijalankan sebelumnya tersembunyi di balik icon panah ke atas yang ada di pojok kanan bawah layar komputer.</p>\n<p>Di setting Windows 11, kita bisa meng-expand tanda panah tersebut sehingga tray tadi tidak tersembunyi lagi.</p>\n<p>Tray berfungsi untuk membuat user sadar bahwa aplikasi yang menggunakan tray masih jalan di background walaupun window-nya sudah tertutup.</p>\n<p>Lalu apa kegunaan BrowserWindow dalam project tutorial ini?</p>\n<p>Penggunaan BrowserWindow kali ini adalah untuk memberi petunjuk lokasi tray tersebut kepada Anda.</p>\n<p>Dengan kata lain file HTML nya hanya berisi panduan saja.</p>\n<p>Ingat bahwa tray yang dipraktekkan di sini hanya telah dicoba di Windows 11.</p>\n<p>Saya tidak menjamin bahwa contoh project ini akan berjalan dengan normal di sistem operasi lainnya.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami Tray dan dapat menggunakannya di aplikasi Electron.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 11. Karena hanya telah teruji di OS tersebut. Saya tidak bisa jamin akan works di OS lain.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah sebuah project Electron dengan nama \"project-electron-tray\".</p>\n<p>Anda bisa membuatnya dengan cara yang dijelaskan pada <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial sebelumnya</a>.</p>\n<p>Jika Anda telah mengikuti tutorial tersebut, pasti ada file bernama \"index.js\" di dalam folder project Anda.</p>\n<p>Bukalah file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// begin: import modules\nconst { app, Menu, Tray, BrowserWindow } = require(\"electron\");\nconst { shell } = require(\"electron\");\n// end: import modules\n\n// variabel untuk menyimpan objek BrowserWindow\nlet win;\n\n// variabel untuk menyimpan objek Tray\nlet tray;\n\n// definisi context menu\nconst contextMenuTemplate = [\n    {\n        label: \"Open Google\",\n        click() {\n            shell.openExternal(\"https://www.google.com\");\n        },\n    },\n    {\n        label: \"Open GitHub\",\n        click() {\n            shell.openExternal(\"https://github.com\");\n        },\n    },\n];\n\n// saat app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow dan simpan objeknya di variabel win\n    win = new BrowserWindow({\n        width: 800,\n        height: 600,\n    });\n\n    // buka file index.html\n    win.loadFile(\"index.html\");\n\n    // buat tray dengan icon tray-icon.ico yang sudah disediakan\n    tray = new Tray(\"./tray-icon.ico\");\n\n    // build context menu\n    const contextMenu = Menu.buildFromTemplate(contextMenuTemplate);\n\n    // buat tooltip dari tray dengan teks \"Tray Example\"\n    tray.setToolTip(\"Tray Example\");\n\n    // assign context menu tadi ke Tray\n    tray.setContextMenu(contextMenu);\n});\n</code></pre>\n<p>Selanjutnya, buat file \"index.html\" dan isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Tray Example&lt;/title&gt;\n\n  &lt;style&gt;\n\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Perhatikan pojok kanan bawah dari layar monitor Anda.&lt;/h1&gt;\n  &lt;h1&gt;Jika icon tray belum terlihat, klik tanda panah ke atasnya.&lt;/h1&gt;\n  &lt;h1&gt;Jika icon tray sudah terlihat, klik kanan pada icon-nya, di sana akan muncul context menu.&lt;/h1&gt;\n  &lt;script&gt;\n\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Langkah selanjutnya adalah, siapkan sebuah file icon berformat .ico, letakkan di dalam folder project ini, kemudian rename menjadi \"tray-icon.ico\".</p>\n<p>Terakhir, coba jalankan Electron dengan:</p>\n<pre>npm run dev</pre>\n<p>Nanti akan muncul BrowserWindow berisi panduan dan jika Anda perhatikan di pojok kanan bawah layar akan muncul tanda panah ke atas.</p>\n<p>Klik tanda panah tersebut dan nanti akan muncul icon Anda tadi.</p>\n<p>Jika Anda klik kanan pada icon tersebut maka context menu akan muncul.</p>\n<p>Dari situ Anda bisa mengklik menu item-nya.</p>\n<h2>Pembahasan</h2>\n<p>Sekarang, saya akan membahas yang paling mudah dulu, yaitu \"index.html\":</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Tray Example&lt;/title&gt;\n\n  &lt;style&gt;\n\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Perhatikan pojok kanan bawah dari layar monitor Anda.&lt;/h1&gt;\n  &lt;h1&gt;Jika icon tray belum terlihat, klik tanda panah ke atasnya.&lt;/h1&gt;\n  &lt;h1&gt;Jika icon tray sudah terlihat, klik kanan pada icon-nya, di sana akan muncul context menu.&lt;/h1&gt;\n  &lt;script&gt;\n\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Kode di atas hanya memberi panduan pada Anda untuk menyaksikan tray yang sedang beraksi.</p>\n<p>Sekarang, yang lebih rumit, \"index.js\".</p>\n<p>Pada bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// begin: import modules\nconst { app, Menu, Tray, BrowserWindow } = require(\"electron\");\nconst { shell } = require(\"electron\");\n// end: import modules</code></pre>\n<p>Kita meng-import modul yang dibutuhkan untuk menampilkan tray dan panduannya.</p>\n<p>Perhatikan di sana ada modul \"Menu\" dan \"Tray\" serta \"BrowserWindow\" dan \"app\".</p>\n<p>Juga ada \"shell\" yang nantinya akan digunakan dalam context menu.</p>\n<p>Kedua variabel ini untuk menyimpan objek BrowserWindow dan Tray:</p>\n<pre class=\"language-javascript line-numbers\"><code>// variabel untuk menyimpan objek BrowserWindow\nlet win;\n\n// variabel untuk menyimpan objek Tray\nlet tray;</code></pre>\n<p>Kode di bawah ini adalah definisi dari struktur context menu:</p>\n<pre class=\"language-javascript line-numbers\"><code>// definisi context menu\nconst contextMenuTemplate = [\n    {\n        label: \"Open Google\",\n        click() {\n            shell.openExternal(\"https://www.google.com\");\n        },\n    },\n    {\n        label: \"Open GitHub\",\n        click() {\n            shell.openExternal(\"https://github.com\");\n        },\n    },\n];</code></pre>\n<p>Perhatikan juga bahwa kita menggunakan shell.openExternal di setiap respon dari context menu item-nya.</p>\n<p>Jika Anda ingin mempelajari shell lebih lanjut, silakan baca <a href=\"https://electron.rakifsul.my.id/belajar-electron-pembahasan-menu-dan-shell.html\">tutorial ini</a>.</p>\n<p>Selanjutnya, saat app ready, buat BrowserWindow dengan lebar 800 pixel dan tinggi 600 pixel:</p>\n<pre class=\"language-javascript line-numbers\"><code>// saat app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow dan simpan objeknya di variabel win\n    win = new BrowserWindow({\n        width: 800,\n        height: 600,\n    });</code></pre>\n<p>Selanjutnya, masukan panduan ke dalam BrowserWindow tersebut:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // buka file index.html\n    win.loadFile(\"index.html\");</code></pre>\n<p>Selanjutnya, buat Tray:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // buat tray dengan icon tray-icon.ico yang sudah disediakan\n    tray = new Tray(\"./tray-icon.ico\");\n\n    // build context menu\n    const contextMenu = Menu.buildFromTemplate(contextMenuTemplate);\n\n    // buat tooltip dari tray dengan teks \"Tray Example\"\n    tray.setToolTip(\"Tray Example\");\n\n    // assign context menu tadi ke Tray\n    tray.setContextMenu(contextMenu);</code></pre>\n<p>Kode di atas adalah urutan yang mungkin bisa Anda terapkan setiap kali Anda membuat Tray karena elemen-elemen Tray di kode tersebut sudah cukup lengkap.</p>\n<h2>Penutup</h2>\n<p>Sekarang, seharusnya Anda sudah paham tentang Tray di framework Electron.</p>\n<p>Saran saya, kembangkan lagi pengetahuan ini dengan eksperimen Anda sendiri.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T21:55:37+07:00",
            "date_modified": "2023-11-25T00:29:46+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-menu-dan-shell.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-menu-dan-shell.html",
            "title": "Belajar Electron - Pembahasan Menu dan Shell",
            "summary": "Pendahuluan Menu adalah sesuatu yang sering ditemukan pada aplikasi desktop. Itu adalah sebuah elemen GUI yang bercabang dan biasanya terletak di bagian atas dari window aplikasi desktop. Meskipun menu dapat dibuat via HTML dari Electron, namun menu yang saya maksud kali ini adalah native menunya.",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Menu adalah sesuatu yang sering ditemukan pada aplikasi desktop.</p>\n<p>Itu adalah sebuah elemen GUI yang bercabang dan biasanya terletak di bagian atas dari window aplikasi desktop.</p>\n<p>Meskipun menu dapat dibuat via HTML dari Electron, namun menu yang saya maksud kali ini adalah native menunya.</p>\n<p>Yakni menu yang menggunakan native API Electron atau yang ada di main process.</p>\n<p>Contohnya seperti “File”, “Edit”, \"View\", \"Help\", dan yang lainnya.</p>\n<p>Selain itu, di artikel ini saya juga membahas penggunaan Shell.</p>\n<p>Saya menggunakan Shell dalam tutorial ini sebagai konsekuensi dipilihnya menu item.</p>\n<p>Shell itu sendiri merupakan modul yang berguna bagi Electron untuk integrasi dengan desktop.</p>\n<p>Maka tidak aneh jika manfaat dari Shell itu sendiri adalah untuk membuka browser ke URL tertentu, membuka explorer ke folder tertentu hingga membunyikan beep.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami konsep menu dan dapat memodifikasi menu bawaan pada Electron.</li>\n<li>Pembaca memahami konsep shell dan dapat menggunakannya.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah sebuah project Electron dengan nama \"project-electron-menu-dan-shell\".</p>\n<p>Anda bisa membuatnya dengan cara yang dijelaskan pada <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial sebelumnya</a>.</p>\n<p>Jika Anda telah mengikuti tutorial tersebut, pasti ada file bernama \"index.js\" di dalam folder project Anda.</p>\n<p>Bukalah file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst { app, Menu, BrowserWindow } = require(\"electron\");\nconst { shell } = require(\"electron\");\n// end: import modules\n\n// definisi menu.\nconst mainMenuTemplate = [\n    {\n        label: \"File\",\n        submenu: [\n            {\n                role: \"quit\",\n            },\n        ],\n    },\n    {\n        label: \"Edit\",\n        submenu: [\n            {\n                role: \"undo\",\n            },\n            {\n                role: \"redo\",\n            },\n            {\n                type: \"separator\",\n            },\n            {\n                role: \"cut\",\n            },\n            {\n                role: \"copy\",\n            },\n            {\n                role: \"paste\",\n            },\n            {\n                role: \"pasteandmatchstyle\",\n            },\n            {\n                role: \"delete\",\n            },\n            {\n                role: \"selectall\",\n            },\n        ],\n    },\n    {\n        label: \"View\",\n        submenu: [\n            {\n                role: \"reload\",\n            },\n            {\n                role: \"forcereload\",\n            },\n            {\n                role: \"toggledevtools\",\n            },\n            {\n                type: \"separator\",\n            },\n            {\n                role: \"togglefullscreen\",\n            },\n        ],\n    },\n    {\n        role: \"window\",\n        submenu: [\n            {\n                role: \"minimize\",\n            },\n            {\n                role: \"close\",\n            },\n        ],\n    },\n    {\n        label: \"Belajar Electron\",\n        submenu: [\n            {\n                label: \"Shell Open External\",\n                click() {\n                    // buka default web browser ke Google.\n                    shell.openExternal(\"https://www.google.com\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka drive C:\n                    shell.openPath(\"C:\\\\\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka file test.txt yang ada di folder project ini.\n                    shell.openPath(\".\\\\test.txt\");\n                },\n            },\n            {\n                label: \"Shell Show Item in Folder\",\n                click() {\n                    // tunjukkan file hosts di explorer\n                    shell.showItemInFolder(\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\");\n                },\n            },\n            {\n                label: \"Shell Beep\",\n                click() {\n                    // bunyikan beep\n                    shell.beep();\n                },\n            },\n        ],\n    },\n];\n\n// variabel untuk menyimpan objek BrowserWindow\nlet win;\n\n// saat app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();\n\n    // buka file index.html\n    win.loadFile(\"index.html\");\n\n    // terapkan menu di atas pada BrowserWindow\n    Menu.setApplicationMenu(Menu.buildFromTemplate(mainMenuTemplate));\n});\n</code></pre>\n<p>Selanjutnya, buat file \"index.html\", kemudian isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Menu &amp; Shell Example&lt;/title&gt;\n\n  &lt;style&gt;\n\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Klik salah satu item pada menu \"Belajar Electron\".&lt;/h1&gt;\n  &lt;script&gt;\n\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Kemudian, buat file \"test.txt\" di dalam folder \"project-electron-menu-dan-shell\" dan isi dengan teks ini:</p>\n<pre>isi file text.txt yang kemungkinan dibuka via menu Electron.</pre>\n<p>Selanjutnya, jalankan Electron dengan perintah:</p>\n<pre>npm run dev</pre>\n<p>Nanti akan muncul BrowserWindow dengan menu item terkanan yang berjudul \"Belajar Electron\".</p>\n<p>Di sub-menu-nya ada beberapa pilihan penggunaan Shell.</p>\n<p>Silakan dicoba satu per satu.</p>\n<h2>Pembahasan</h2>\n<p>Sekarang, saya akan membahas yang paling mudah dulu, yakni \"index.html\".</p>\n<p>Kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Menu &amp; Shell Example&lt;/title&gt;\n\n  &lt;style&gt;\n\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Klik salah satu item pada menu \"Belajar Electron\".&lt;/h1&gt;\n  &lt;script&gt;\n\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Hanya berisi pesan saja yang isinya:</p>\n<pre>Klik salah satu item pada menu \"Belajar Electron\".</pre>\n<p>Sekarang, bagian yang lebih rumit.</p>\n<p>Yakni \"index.js\".</p>\n<p>Kode bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// definisi menu.\nconst mainMenuTemplate = [\n    {\n        label: \"File\",\n        submenu: [\n            {\n                role: \"quit\",\n            },\n        ],\n    },\n    {\n        label: \"Edit\",\n        submenu: [\n            {\n                role: \"undo\",\n            },\n            {\n                role: \"redo\",\n            },\n            {\n                type: \"separator\",\n            },\n            {\n                role: \"cut\",\n            },\n            {\n                role: \"copy\",\n            },\n            {\n                role: \"paste\",\n            },\n            {\n                role: \"pasteandmatchstyle\",\n            },\n            {\n                role: \"delete\",\n            },\n            {\n                role: \"selectall\",\n            },\n        ],\n    },\n    {\n        label: \"View\",\n        submenu: [\n            {\n                role: \"reload\",\n            },\n            {\n                role: \"forcereload\",\n            },\n            {\n                role: \"toggledevtools\",\n            },\n            {\n                type: \"separator\",\n            },\n            {\n                role: \"togglefullscreen\",\n            },\n        ],\n    },\n    {\n        role: \"window\",\n        submenu: [\n            {\n                role: \"minimize\",\n            },\n            {\n                role: \"close\",\n            },\n        ],\n    },\n    {\n        label: \"Belajar Electron\",\n        submenu: [\n            {\n                label: \"Shell Open External\",\n                click() {\n                    // buka default web browser ke Google.\n                    shell.openExternal(\"https://www.google.com\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka drive C:\n                    shell.openPath(\"C:\\\\\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka file test.txt yang ada di folder project ini.\n                    shell.openPath(\".\\\\test.txt\");\n                },\n            },\n            {\n                label: \"Shell Show Item in Folder\",\n                click() {\n                    // tunjukkan file hosts di explorer\n                    shell.showItemInFolder(\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\");\n                },\n            },\n            {\n                label: \"Shell Beep\",\n                click() {\n                    // bunyikan beep\n                    shell.beep();\n                },\n            },\n        ],\n    },\n];</code></pre>\n<p>Adalah definisi dari struktur menu yang akan diterapkan pada BrowserWindow.</p>\n<p>Struktur tersebut disimpan dalam sebuah konstanta bernama \"<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">mainMenuTemplate\".</span></p>\n<p>Nanti di bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // terapkan menu di atas pada BrowserWindow\n    Menu.setApplicationMenu(Menu.buildFromTemplate(mainMenuTemplate));</code></pre>\n<p>Kita akan menerapkannya di BrowserWindow.</p>\n<p>Sekarang, kita akan membahas tentang Shell.</p>\n<p>Kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>{\n        label: \"Belajar Electron\",\n        submenu: [\n            {\n                label: \"Shell Open External\",\n                click() {\n                    // buka default web browser ke Google.\n                    shell.openExternal(\"https://www.google.com\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka drive C:\n                    shell.openPath(\"C:\\\\\");\n                },\n            },\n            {\n                label: \"Shell Open Path\",\n                click() {\n                    // buka file test.txt yang ada di folder project ini.\n                    shell.openPath(\".\\\\test.txt\");\n                },\n            },\n            {\n                label: \"Shell Show Item in Folder\",\n                click() {\n                    // tunjukkan file hosts di explorer\n                    shell.showItemInFolder(\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\");\n                },\n            },\n            {\n                label: \"Shell Beep\",\n                click() {\n                    // bunyikan beep\n                    shell.beep();\n                },\n            },\n        ],\n    },</code></pre>\n<p>Menunjukkan bahwa sub-menu dari menu item \"Belajar Electron\" menggunakan beragam jenis method Shell.</p>\n<ul>\n<li><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">shell.openExternal(\"https://www.google.com\"); akan membuka Google.</span></li>\n<li>shell.openPath(\"C:\\\\\"); akan membuka drive C:</li>\n<li>shell.openPath(\".\\\\test.txt\"); akan membuka file test.txt yang ada di folder project ini.</li>\n<li>shell.showItemInFolder(\"C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts\"); akan membuka Explorer dan menyorot file \"hosts\".</li>\n<li>shell.beep(); akan membunyikan speaker dengan suara beep.</li>\n</ul>\n<h2>Penutup</h2>\n<p>Sekarang seharusnya Anda telah memahami menu dan shell pada Electron.</p>\n<p>Selanjutnya, Anda bisa mencoba memodifikasi menu dan shell yang saya buat tadi dan melihat hasilnya.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T20:35:08+07:00",
            "date_modified": "2023-11-25T00:30:03+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-mengenal-save-dialog.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-mengenal-save-dialog.html",
            "title": "Belajar Electron - Mengenal Save Dialog",
            "summary": "Pendahuluan Fitur \"save\" atau \"save as\" bukan hal yang baru di aplikasi desktop. Biasanya saat menu untuk fitur tersebut diklik, maka akan tampil dialog yang bisa memilih lokasi penyimpanan file. Itulah Save Dialog. Electron memberi kita fitur Save Dialog melalui method dialog.showSaveDialog. Itu termasuk fitur&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Fitur \"save\" atau \"save as\" bukan hal yang baru di aplikasi desktop.</p>\n<p>Biasanya saat menu untuk fitur tersebut diklik, maka akan tampil dialog yang bisa memilih lokasi penyimpanan file.</p>\n<p>Itulah Save Dialog.</p>\n<p>Electron memberi kita fitur Save Dialog melalui method dialog.showSaveDialog.</p>\n<p>Itu termasuk fitur main process dari Electron.</p>\n<p>Bagaimana detailnya? Mari kita pelajari.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami dan mampu menggunakan method dialog.showSaveDialog.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah sebuah project Electron dengan nama \"project-electron-save-dialog\".</p>\n<p>Anda bisa membuatnya dengan cara yang dijelaskan pada <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial sebelumnya</a>.</p>\n<p>Jika Anda telah mengikuti tutorial tersebut, pasti ada file bernama \"index.js\" di dalam folder project Anda.</p>\n<p>Bukalah file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst { app, dialog, BrowserWindow } = require(\"electron\");\n// end: import modules\n\n// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();\n\n    // buka save dialog\n    // judulnya: Judul Dialog\n    // path default nya: D:\n    // filter untuk jenis file JavaScript\n    const result = await dialog.showSaveDialog(win, {\n        title: \"Judul Dialog\",\n        defaultPath: \"D:\\\\\",\n        filters: [\n            {\n                name: \"JavaScript\",\n                extensions: [\"js\"],\n            },\n        ],\n    });\n\n    console.log(result); // perhatikan hasilnya\n});\n</code></pre>\n<p>Sekarang, jalankan Electron dengan perintah:</p>\n<pre>npm run dev</pre>\n<p>Nanti Save Dialog akan muncul bersamaan dengan terbukanya BrowserWindow.</p>\n<p>Setelah lokasi save dipilih, maka akan muncul output berisi path di console dari PowerShell.</p>\n<p>Berbeda dengan Open Dialog yang berupa array.</p>\n<p>Di Save Dialog hanya single value.</p>\n<p>Itu masuk akal karena kita hanya bisa mensave satu file dalam satu waktu jika menggunakan Save Dialog.</p>\n<h2>Pembahasan</h2>\n<p>Aplikasi yang kita buat ini berawal dari mengimpor modul:</p>\n<pre class=\"language-javascript line-numbers\"><code>// begin: import modules\nconst { app, dialog, BrowserWindow } = require(\"electron\");\n// end: import modules</code></pre>\n<p>Kemudian dilanjutkan dengan membuat BrowserWindow dan menyimpan referensinya ke variabel bernama win:</p>\n<pre class=\"language-javascript line-numbers\"><code>// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();</code></pre>\n<p>Setelah itu, kita menampilkan Save Dialog dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // buka save dialog\n    // judulnya: Judul Dialog\n    // path default nya: D:\n    // filter untuk jenis file JavaScript\n    const result = await dialog.showSaveDialog(win, {\n        title: \"Judul Dialog\",\n        defaultPath: \"D:\\\\\",\n        filters: [\n            {\n                name: \"JavaScript\",\n                extensions: [\"js\"],\n            },\n        ],\n    });\n\n    console.log(result); // perhatikan hasilnya</code></pre>\n<p>Judul dari Save Dialog yang kita buat adalah \"Judul Dialog\".</p>\n<p>Default path-nya adalah \"D:\\\\\".</p>\n<p>Selain itu, kita juga memfilter file dengan ekstensi \".js\".</p>\n<p>dialog.showSaveDialog akan mengembalikan objek saat selesai digunakan.</p>\n<p>Objek itu terdiri dari 2 property:</p>\n<ul>\n<li>cancelled: apakah user membatalkan pemilihan lokasi file?</li>\n<li>filePath: path di mana user men-save file.</li>\n</ul>\n<h2>Penutup</h2>\n<p>Sekarang Anda telah memahami method dialog.showSaveDialog.</p>\n<p>Silakan kembangkan pengetahuan ini lebih lanjut.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T18:43:31+07:00",
            "date_modified": "2023-11-25T00:30:19+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-mengenal-open-dialog.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-mengenal-open-dialog.html",
            "title": "Belajar Electron - Mengenal Open Dialog",
            "summary": "Pendahuluan Dalam penggunaan aplikasi desktop, tidak jarang kita memerlukan file yang sudah dibuat sebelumnya dan kita ingin membukanya kembali. Jika kita memasukkan path-nya secara manual, maka akan terasa sulit jika kita tidak terbiasa menggunakan command line. Untuk mendapatkan lokasi file-nya dengan lebih mudah diperlukan sebuah&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Dalam penggunaan aplikasi desktop, tidak jarang kita memerlukan file yang sudah dibuat sebelumnya dan kita ingin membukanya kembali.</p>\n<p>Jika kita memasukkan path-nya secara manual, maka akan terasa sulit jika kita tidak terbiasa menggunakan command line.</p>\n<p>Untuk mendapatkan lokasi file-nya dengan lebih mudah diperlukan sebuah dialog.</p>\n<p>Dialog tersebut disebut open dialog.</p>\n<p>Dengan open dialog, kita bisa menemukan lokasi file dengan bantuan GUI.</p>\n<p>Tujuannya adalah mendapatkan path dari file tersebut.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami method dialog.showOpenDialog dan beberapa parameternya.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah sebuah project Electron dengan nama \"project-electron-open-dialog\".</p>\n<p>Anda bisa membuatnya dengan cara yang dijelaskan pada <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial sebelumnya</a>.</p>\n<p>Jika Anda telah mengikuti tutorial tersebut, pasti ada file bernama \"index.js\" di dalam folder project Anda.</p>\n<p>Bukalah file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst { app, dialog, BrowserWindow } = require(\"electron\");\n// end: import modules\n\n// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on(\"ready\", async () =&gt; {\n    // buat browser window\n    win = new BrowserWindow();\n\n    // dialog untuk membuka file\n    const result1 = await dialog.showOpenDialog(win, {\n        title: \"Open Project File\",\n        properties: [\"openFile\"],\n        filters: [\n            {\n                name: \"Dokumen\",\n                extensions: [\"pdf\"],\n            },\n        ],\n    });\n    console.log(result1); //perhatikan hasilnya\n\n    //dialog untuk membuka directory\n    const result2 = await dialog.showOpenDialog(win, {\n        title: \"Open Project Folder\",\n        properties: [\"openDirectory\"],\n    });\n    console.log(result2); //perhatikan hasilnya\n});\n</code></pre>\n<p>Selanjutnya, jalankan Electron dengan:</p>\n<pre>npm run dev</pre>\n<p>Hasilnya, kedua dialog yang ada di kode tadi akan muncul secara berurutan.</p>\n<p>Dialog pertama untuk memilih file PDF.</p>\n<p>Dialog kedua untuk memilih folder.</p>\n<p>Setelah kedua dialog tadi ditutup, maka sisanya adalah BrowserWindow.</p>\n<h2>Pembahasan</h2>\n<p>Dalam tutorial ini, hanya ada satu file JavaScript, yakni \"index.js\". Selain dari yang ada di node_modules tentunya.</p>\n<p>Pada bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // dialog untuk membuka file\n    const result1 = await dialog.showOpenDialog(win, {\n        title: \"Open Project File\",\n        properties: [\"openFile\"],\n        filters: [\n            {\n                name: \"Dokumen\",\n                extensions: [\"pdf\"],\n            },\n        ],\n    });\n    console.log(result1); //perhatikan hasilnya</code></pre>\n<p>Kita membuka open dialog untuk memilih file, karena ada parameter </p>\n<div>\n<div>properties: [\"openFile\"].</div>\n</div>\n<p>File yang dapat dibuka dari open dialog tersebut berjenis PDF saja, karena ada parameter extensions: [\"pdf\"].</p>\n<p>Extensions itu sendiri adalah akhiran dari nama file setelah titik:</p>\n<ul>\n<li>notes.txt extension-nya adalah txt</li>\n<li>book.pdf extension-nya adalah pdf</li>\n</ul>\n<p>Return value dari method tersebut adalah array berisi file path.</p>\n<p>Pada bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    //dialog untuk membuka directory\n    const result2 = await dialog.showOpenDialog(win, {\n        title: \"Open Project Folder\",\n        properties: [\"openDirectory\"],\n    });\n    console.log(result2); //perhatikan hasilnya</code></pre>\n<p>Kita menggunakan open dialog untuk memilih folder.</p>\n<p>Itu karena ada parameter <span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">properties: [\"openDirectory\"].</span></p>\n<p>Directory dan folder itu bisa dianggap istilah yang sama.</p>\n<p>Return value dari method tersebut adalah array berisi file path.</p>\n<h2>Penutup</h2>\n<p>Sekarang, Anda telah memahami method dialog.showOpenDialog dan beberapa parameternya.</p>\n<p>Silakan dieksplorasi lebih jauh lagi.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T17:53:19+07:00",
            "date_modified": "2023-11-25T00:30:45+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-mengenal-message-box.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-mengenal-message-box.html",
            "title": "Belajar Electron - Mengenal Message Box",
            "summary": "Pendahuluan Dalam sebuah aplikasi desktop, terkadang ada pesan yang perlu disampaikan kepada pengguna karena berbagai alasan. Misalnya ada error pada aplikasi, task tertentu telah selesai dilakukan, ada peringatan, dan lain-lain. Untuk menampilkan pesan semacam itu, Message Box bisa digunakan. Electron telah menyediakan API untuk memberi&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Dalam sebuah aplikasi desktop, terkadang ada pesan yang perlu disampaikan kepada pengguna karena berbagai alasan.</p>\n<p>Misalnya ada error pada aplikasi, task tertentu telah selesai dilakukan, ada peringatan, dan lain-lain.</p>\n<p>Untuk menampilkan pesan semacam itu, Message Box bisa digunakan.</p>\n<p>Electron telah menyediakan API untuk memberi pesan melalui Message Box.</p>\n<p>Di sini, saya akan membahas beberapa jenis Message Box yang disediakan Electron.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca mengenal beragam jenis Message Box di Electron.</li>\n<li>Pembaca dapat menggunakan Message Box di Electron.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah project Electron dengan nama \"project-electron-message-box\".</p>\n<p>Anda bisa membuatnya dengan cara yang telah dijelaskan di <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial yang sebelumnya</a>.</p>\n<p>Selanjutnya, buka file \"index.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst { app, dialog, BrowserWindow } = require(\"electron\");\n// end: import modules\n\n// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on(\"ready\", async () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();\n\n    // message box biasa\n    await dialog.showMessageBox({\n        message: \"message box biasa\",\n    });\n\n    // message box modal. jadi message box ini menutupi parent window nya.\n    await dialog.showMessageBox(win, {\n        message: \"message box modal\",\n    });\n\n    // message box error\n    await dialog.showMessageBox({\n        message: \"message box error\",\n        type: \"error\",\n    });\n\n    // message box info\n    await dialog.showMessageBox({\n        message: \"message box info\",\n        type: \"info\",\n    });\n\n    // return value dari message box\n    const buttonID1 = await dialog.showMessageBox({\n        message: \"return value dari message box - lihat console\",\n        buttons: [\"Ya\", \"Tidak\", \"Batalkan\"],\n    });\n    console.log(buttonID1);\n\n    // message box dengan checkbox\n    const buttonID2 = await dialog.showMessageBox({\n        message: \"message box dengan checkbox - lihat console\",\n        buttons: [\"Ya\", \"Tidak\", \"Batalkan\"],\n        checkboxLabel: \"Coba Checkbox\",\n        checkboxChecked: false,\n    });\n    console.log(buttonID2);\n});\n</code></pre>\n<p>Kemudian, jalankan aplikasi ini dengan:</p>\n<pre>npm run dev</pre>\n<p>Nanti BrowserWindow akan muncul bersama beberapa jenis Message Box yang ditulis di \"index.js\" tadi.</p>\n<h2>Pembahasan</h2>\n<p>Pada tutorial ini, kita hanya perlu satu file JavaScript untuk main process saja.</p>\n<p>Itu karena Message Box adalah bagian dari main process.</p>\n<p>Message Box itu sendiri merupakan komponen yang dipanggil melalui method showMessageBox yang merupakan method dari modul dialog.</p>\n<p>Kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // message box biasa\n    await dialog.showMessageBox({\n        message: \"message box biasa\",\n    });</code></pre>\n<p>Memanggil Message Box biasa.</p>\n<p>Sifatnya juga non-modal, yang artinya kemunculannya tidak menghalangi parent window-nya.</p>\n<p>Adapun kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // message box modal. jadi message box ini menutupi parent window nya.\n    await dialog.showMessageBox(win, {\n        message: \"message box modal\",\n    });</code></pre>\n<p>Memanggil Message Box biasa juga.</p>\n<p>Hanya saja, sifatnya modal. Artinya kemunculannya menghalangi parent window-nya.</p>\n<p>Anda bisa lihat sendiri bahwa di kode tersebut saya mem-passing variabel win sebagai parent dari Message Box itu.</p>\n<p>Kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // message box error\n    await dialog.showMessageBox({\n        message: \"message box error\",\n        type: \"error\",\n    });\n\n    // message box info\n    await dialog.showMessageBox({\n        message: \"message box info\",\n        type: \"info\",\n    });</code></pre>\n<p>Memanggil Message Box dari jenis error dan info.</p>\n<p>Perbedaannya ada pada icon yang ditampilkan.</p>\n<p>Selain itu, Message Box juga bisa memberikan return value, tergantung dari tombol apa yang diklik dari Message Box tesebut:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // return value dari message box\n    const buttonID1 = await dialog.showMessageBox({\n        message: \"return value dari message box - lihat console\",\n        buttons: [\"Ya\", \"Tidak\", \"Batalkan\"],\n    });\n    console.log(buttonID1);</code></pre>\n<p>Anda bisa lihat console dari PowerShell untuk mendapatkan index tombol mana yang diklik.</p>\n<p>Index tersebut adalah index dari array teks tombol ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>[\"Ya\", \"Tidak\", \"Batalkan\"]</code></pre>\n<p>Message Box juga bisa disertai checkbox:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // message box dengan checkbox\n    const buttonID2 = await dialog.showMessageBox({\n        message: \"message box dengan checkbox - lihat console\",\n        buttons: [\"Ya\", \"Tidak\", \"Batalkan\"],\n        checkboxLabel: \"Coba Checkbox\",\n        checkboxChecked: false,\n    });\n    console.log(buttonID2);</code></pre>\n<p>Di kode tadi, label dari checkbox adalah \"Coba Checkbox\".</p>\n<p>Return valuenya juga bisa didapatkan. Silakan cek console dari PowerShell Anda.</p>\n<h2>Penutup</h2>\n<p>Sekarang Anda telah mengenal beberapa jenis Message Box yang tadi telah saya bahas.</p>\n<p>Dalam prakteknya, saya lebih menyarankan untuk menggunakan Message Box daripada alert().</p>\n<p>Itu karena fitur Message Box lebih lengkap.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T16:50:30+07:00",
            "date_modified": "2023-11-25T00:30:58+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-mengenal-ipcmain-dan-ipcrenderer.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-mengenal-ipcmain-dan-ipcrenderer.html",
            "title": "Belajar Electron - Mengenal ipcMain dan ipcRenderer",
            "summary": "Pendahuluan Konsep main dan renderer process sangat penting untuk dipahami. Main dan renderer process sangat erat kaitannya dengan modul ipcMain dan ipcRenderer. ipcMain dan ipcRenderer digunakan dalam komunikasi antara main process dengan renderer proces. Itulah yang memberi kita peluang untuk memanggil native API dari HTML&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Konsep main dan renderer process sangat penting untuk dipahami.</p>\n<p>Main dan renderer process sangat erat kaitannya dengan modul ipcMain dan ipcRenderer.</p>\n<p>ipcMain dan ipcRenderer digunakan dalam komunikasi antara main process dengan renderer proces.</p>\n<p>Itulah yang memberi kita peluang untuk memanggil native API dari HTML dan melakukan perubahan pada HTML melalui native API.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami konsep ipcMain.</li>\n<li>Pembaca memahami konsep ipcRenderer.</li>\n<li>Pembaca memahami interaksi antara ipcMain dan ipcRenderer.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-menggunakan-jquery.html\">cara menggunakan jQuery di Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah project Electron baru bernama \"project-electron-ipc\".</p>\n<p>Sebenarnya, namanya bebas, tapi lebih baik ikuti saya.</p>\n<p>Di tutorial <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron sebelumnya</a>, Anda telah memiliki file \"index.js\".</p>\n<p>Kita akan menggunakan file tersebut dan menambah beberapa file tambahan.</p>\n<p>Selain itu, gunakan jQuery dalam aplikasi ini. Caranya sudah dijelaskan <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-menggunakan-jquery.html\">di tutorial sebelumnya</a>.</p>\n<p>Bukalah file \"index.js\", kemudian isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import module\nconst {\n    app,\n    BrowserWindow,\n    ipcMain\n} = require('electron');\n// end: import module\n\n// buat variable win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on('ready', () =&gt; {\n    // buat BrowserWindow dengan webPreferencesnya\n    win = new BrowserWindow({\n        webPreferences: {\n            contextIsolation: false,\n            enableRemoteModule: true,\n            nodeIntegration: true\n        }\n    });\n\n    //load index.html\n    win.loadURL(`file:///${__dirname}/index.html`);\n});\n\n// di sini kita meng-handle event \"button-click\" yang dikirimkan dari renderer process\nipcMain.on('button-click', (event, args) =&gt; {\n    console.log(\"my name is \" + args.name + \" and my age is: \" + args.age);\n\n    // reply ke pemanggil\n    event.reply('button-click-reply', 'reply from main process (button-click)');\n\n    // reply dengan webContents.send\n    win.webContents.send('from-win-webcontents-send', 'reply from win.webContents.send');\n});</code></pre>\n<p>Selanjutnya, buat file \"renderer.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: renderer.js\n// dimuat dari index.html\n\n// begin: import modules\nconst {\n    ipcRenderer\n} = require('electron');\n// end: import modules\n\n// ketika dokumen html ready\n$(document).ready(function () {\n\n    // ketika button dengan id: btn-send-to-main-process diklik\n    $('#btn-send-to-main-process').click(function () {\n        // kirim event ke main process\n        ipcRenderer.send('button-click', { name: \"swlrnshw-200\", age: \"30an\" });\n    })\n\n    // balasan dari main process (dengan event.reply di main process)\n    ipcRenderer.on('button-click-reply', (event, args) =&gt; {\n        alert(args);\n    });\n\n    // balasan dari main process (dengan webContents.send)\n    ipcRenderer.on('from-win-webcontents-send', (event, args) =&gt; {\n        alert(args);\n    });\n});</code></pre>\n<p>Selanjutnya, buat file \"index.html\", kemudian isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;IPCMain dan IPCRenderer&lt;/h1&gt;\n    &lt;button id=\"btn-send-to-main-process\"&gt;Send to Main Process&lt;/button&gt;\n    &lt;script&gt;\n        window.jQuery = require(\"./jquery.min.js\");\n        window.$ = window.jQuery;\n    &lt;/script&gt;\n    &lt;script src=\"renderer.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Setelah selesai, jalankan Electron dengan:</p>\n<pre>npm run dev</pre>\n<p>Kemudian klik tombol \"Send to Main Process\".</p>\n<p>Nanti di console PowerShell akan muncul teks:</p>\n<pre>my name is swlrnshw-200 and my age is 30an</pre>\n<p>Di BrowserWindow juga akan memunculkan popup dua kali.</p>\n<h2>Pembahasan</h2>\n<p>Pembahasan akan kita mulai dari \"index.html\".</p>\n<p>Di \"index.html\" ada sebuah tombol yang jika diklik maka akan mengirimkan sinyal ke main process.</p>\n<p>Teks tombol tersebut adalah \"Send to Main Process\":</p>\n<pre class=\"language-html line-numbers\"><code>&lt;button id=\"btn-send-to-main-process\"&gt;Send to Main Process&lt;/button&gt;</code></pre>\n<p>Perhatikan baik-baik id-nya.</p>\n<p>Di situ, id dari tombol tadi adalah \"btn-send-to-main-process\" yang akan menghandle event click. Bisa dilihat dari script \"renderer.js\" ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // ketika button dengan id: btn-send-to-main-process diklik\n    $('#btn-send-to-main-process').click(function () {\n        // kirim event ke main process\n        ipcRenderer.send('button-click', { name: \"swlrnshw-200\", age: \"30an\" });\n    })</code></pre>\n<p>Saat tombol diklik, maka kirim sinyal \"button-click\" ke main process. </p>\n<p>Data yang dikirim adalah name dan age.</p>\n<p>Sementara itu di main process:</p>\n<pre class=\"language-javascript line-numbers\"><code>// di sini kita meng-handle event \"button-click\" yang dikirimkan dari renderer process\nipcMain.on('button-click', (event, args) =&gt; {\n    console.log(\"my name is \" + args.name + \" and my age is: \" + args.age);\n\n    // reply ke pemanggil\n    event.reply('button-click-reply', 'reply from main process (button-click)');\n\n    // reply dengan webContents.send\n    win.webContents.send('from-win-webcontents-send', 'reply from win.webContents.send');\n});</code></pre>\n<p>Kita menangani \"button-click\" yang telah dikirimkan tadi.</p>\n<p>Response nya adalah mem-print teks di console PowerShell:</p>\n<pre class=\"language-javascript line-numbers\"><code>console.log(\"my name is \" + args.name + \" and my age is: \" + args.age);\n</code></pre>\n<p>Dilanjutkan dengan reply kembali ke renderer process:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // reply ke pemanggil\n    event.reply('button-click-reply', 'reply from main process (button-click)');\n\n    // reply dengan webContents.send\n    win.webContents.send('from-win-webcontents-send', 'reply from win.webContents.send');</code></pre>\n<p>Dengan kode di atas, maka renderer process akan meresponnya dengan popup:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // balasan dari main process (dengan event.reply di main process)\n    ipcRenderer.on('button-click-reply', (event, args) =&gt; {\n        alert(args);\n    });\n\n    // balasan dari main process (dengan webContents.send)\n    ipcRenderer.on('from-win-webcontents-send', (event, args) =&gt; {\n        alert(args);\n    });</code></pre>\n<p>Isi args dari popup pertama adalah:</p>\n<pre>reply from main process (button-click)</pre>\n<p>Isi args dari popup kedua adalah:</p>\n<pre>reply from win.webContents.send</pre>\n<p>Jadi ada dua cara untuk melakukan reply.</p>\n<p>Yang pertama dengan menggunakan event.reply dan yang kedua dengan win.webContents.send.</p>\n<h2>Penutup</h2>\n<p>Sekarang Anda telah dijelaskan tentang ipcMain, ipcRenderer dan interaksi di antara keduanya.</p>\n<p>Saran saya, coba eksplorasi method-method lain dari ipcMain dan ipcRenderer dan coba di project Anda sendiri.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T13:05:52+07:00",
            "date_modified": "2023-11-25T00:31:14+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-memahami-perilaku-consolelog.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-memahami-perilaku-consolelog.html",
            "title": "Belajar Electron - Memahami Perilaku console.log",
            "summary": "Pendahuluan Perilaku console.log berbeda-beda di Electron. Tergantung dari apakah console.log tersebut dijalankan di main process atau renderer process. Pemahaman konsep main process dan renderer process adalah sangat penting dalam menggunakan Electron. Ini adalah cara untuk menyadarkan Anda, bahwa main process adalah process yang berbeda dengan&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Perilaku console.log berbeda-beda di Electron.</p>\n<p>Tergantung dari apakah console.log tersebut dijalankan di main process atau renderer process.</p>\n<p>Pemahaman konsep main process dan renderer process adalah sangat penting dalam menggunakan Electron.</p>\n<p>Ini adalah cara untuk menyadarkan Anda, bahwa main process adalah process yang berbeda dengan renderer process, walaupun masih dalam satu aplikasi Electron.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca mampu memahami perilaku console.log di renderer process.</li>\n<li>Pembaca mampu memahami perilaku console.log di main process.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buat project Electron baru bernama \"project-electron-console-log\".</p>\n<p>Anda bisa gunakan project Electron yang telah Anda buat <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">di bagian ini</a>.</p>\n<p>Sekarang, buka file \"index.js\", kemudian isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// end: import modules\n\n// variabel yang menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on('ready', () =&gt; {\n    // buat Browser Window\n    win = new BrowserWindow();\n\n    // buka URL dari index.html\n    win.loadURL(`file:///${__dirname}/index.html`);\n\n    // ini dilakukan di main process. akan tampil di command line Anda. jika tanda komentar dihapus.\n    // console.log(\"console.log di main process\");\n})</code></pre>\n<p>Selanjutnya, buat file \"renderer.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: renderer.js\n\n// mem-print teks di renderer process.\nconsole.log(\"console.log di renderer process\")</code></pre>\n<p>Selanjutnya, buat file \"index.html\" dan isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Console Log&lt;/h1&gt;\n\n    &lt;script src=\"renderer.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Sekarang, jalankan aplikasi ini dengan:</p>\n<pre>npm run dev</pre>\n<p>Nanti, setelah BrowserWindow terbuka, buka dev tools atau inspect elemen melalui menu utama aplikasi Electron Anda di \"View\" &gt; \"Toggle Developer Tools\".</p>\n<p>Kemudian pada dev tools, buka tab console.</p>\n<p>Nanti di tab tersebut akan tampil teks:</p>\n<pre>console.log di renderer process</pre>\n<p>Selanjutnya, setelah Anda melihat itu, tutup aplikasi Electron Anda.</p>\n<p>Kemudian uncomment kode di file \"index.js\" bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // ini dilakukan di main process. akan tampil di command line Anda. jika tanda komentar dihapus.\n    // console.log(\"console.log di main process\");</code></pre>\n<p>Sehingga menjadi:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // ini dilakukan di main process. akan tampil di command line Anda. jika tanda komentar dihapus.\n    console.log(\"console.log di main process\");</code></pre>\n<p>Kembali jalankan ini sambil memperhatikan layar PowerShell Anda:</p>\n<pre>npm run dev</pre>\n<p>Nanti di PowerShell akan muncul</p>\n<pre>console.log di main process</pre>\n<p>Kira-kira seperti itu.</p>\n<h2>Pembahasan</h2>\n<p>Kali ini, ada dua file JS yang kita buat: \"index.js\" dan \"renderer.js\".</p>\n<p>File \"index.js\" berperan sebagai script untuk main process.</p>\n<p>Adapun file \"renderer.js\" berperan sebagai script untuk renderer process.</p>\n<p>Oleh karena itulah, \"renderer.js\" harus diimpor via script tag di \"index.html\":</p>\n<pre class=\"language-html line-numbers\"><code>&lt;body&gt;\n    &lt;h1&gt;Console Log&lt;/h1&gt;\n\n    &lt;script src=\"renderer.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<p>Apakah nama script-nya harus \"renderer.js\"?</p>\n<p>Tentu tidak.</p>\n<p>Anda bisa menamainya \"kelinci.js\" asalkan nanti di tag script di \"index.html\" nama script-nya disesuaikan.</p>\n<p>console.log yang dilakukan di renderer process outputnya akan keluar di dev tools.</p>\n<p>Adapun console.log yang dilakukan di main process output-nya akan keluar di terminal, console, PowerShell atau aplikasi command line apapun yang menjalankan aplikasi ini.</p>\n<h2>Penutup</h2>\n<p>Sekarang, Anda telah memahami perilaku console.log di main process dan renderer process.</p>\n<p>Ini adalah awal untuk memahami main process dan renderer process lebih lanjut.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T12:00:37+07:00",
            "date_modified": "2023-11-25T00:31:24+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-loadurl.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-loadurl.html",
            "title": "Belajar Electron - Pembahasan tentang loadURL",
            "summary": "Pendahuluan Method BrowserWindow yang bernama loadURL ini memiliki fungsi ganda. Pertama, ia bisa me-load alamat web secara remote. Kedua, ia bisa me-load file HTML lokal. Penggunaan loadURL adalah sangat sering saat kita menggunakan framework Electron, karena tampilan dari aplikasi Electron dibuka melalui method tersebut. Walaupun&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Method BrowserWindow yang bernama loadURL ini memiliki fungsi ganda.</p>\n<p>Pertama, ia bisa me-load alamat web secara remote.</p>\n<p>Kedua, ia bisa me-load file HTML lokal.</p>\n<p>Penggunaan loadURL adalah sangat sering saat kita menggunakan framework Electron, karena tampilan dari aplikasi Electron dibuka melalui method tersebut.</p>\n<p>Walaupun demikian, ada method BrowserWindow yang bernama loadFile yang bisa menggantikan loadURL untuk membuka file HTML lokal.</p>\n<p>Tapi itu untuk versi Electron yang agak baru.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca memahami fungsi loadURL pada BrowserWindow.</li>\n<li>Pembaca memahami fungsi loadFile pada BrowserWindow.</li>\n<li>Pembaca dapat membuka file HTML lokal dengan loadURL.</li>\n<li>Pembaca dapat membuka HTML secara remote via URL yang diberikan.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah project Electron baru bernama \"project-electron-loadurl\".</p>\n<p>Sebenarnya, namanya bebas, tapi lebih baik ikuti saya.</p>\n<p>Di tutorial <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron sebelumnya</a>, Anda telah memiliki file \"index.js\", bukan?</p>\n<p>Nah. Kita akan menggunakan itu.</p>\n<p>Sekarang, buka file \"index.js\", kemudian isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\n// begin: import modules\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// end: import modules\n\n// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;\n\n// ketika app ready\napp.on('ready', () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();\n\n    // load dengan input URL di web\n    // win.loadURL(\"https://duckduckgo.com\");\n\n    // load dengan input URL di file lokal\n    win.loadURL(`file:///${__dirname}/index.html`);\n})</code></pre>\n<p>Selanjutnya, buat file baru bernama \"index.html\" dan isi dengan kode ini:</p>\n<pre class=\"language-html line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Load URL dari file HTML&lt;/h1&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Sekarang, jalankan aplikasi tersebut dengan:</p>\n<pre>npm run dev</pre>\n<p>Nanti di BrowserWindow akan tampil:</p>\n<pre>Load URL dari file HTML</pre>\n<p>Itu adalah file HTML yang kita buat tadi.</p>\n<p>Jika Anda uncomment dan comment bagian ini (kebalikan yang sebelumnya):</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di web\n    win.loadURL(\"https://duckduckgo.com\");\n\n    // load dengan input URL di file lokal\n    // win.loadURL(`file:///${__dirname}/index.html`);</code></pre>\n<p>Maka saat aplikasi tersebut di-restart (close dulu, kemudian):</p>\n<pre>npm run dev</pre>\n<p>Yang tampil adalah halaman homepage dari duckduckgo.</p>\n<h2>Pembahasan</h2>\n<p>Pada file index.html, kita membuat halaman web sederhana dengan teks \"Load URL dari file HTML\".</p>\n<p>File itu ada di komputer lokal, tepatnya di dalam folder \"project-electron-loadurl\".</p>\n<p>File itu di-load dengan fungsi BrowserWindow loadURL dengan menyertakan protokol file:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di file lokal\n    win.loadURL(`file:///${__dirname}/index.html`);</code></pre>\n<p>Penggunaan file:/// dalam URL sama dengan membuka file lokal.</p>\n<p>__dirname itu sendiri adalah nama folder di mana script \"index.js\" berada, yakni di dalam folder \"project-electron-loadurl\".</p>\n<p>Karena file \"index.html\" juga ada di dalam folder \"project-electron-loadurl\" maka input tersebut valid dan isi \"index.html\" akan di-render ke aplikasi Electron kita.</p>\n<p>Sebagai catatan, di Electron versi terbaru ada sebuah fungsi baru yang bernama loadFile.</p>\n<p>Fungsinya sama dengan yang tadi, tapi penggunaannya lebih sederhana.</p>\n<p>Cukup lakukan:</p>\n<pre class=\"language-javascript line-numbers\"><code>win.loadFile(\"index.html\");</code></pre>\n<p>Karena cukup sederhana, saya sertakan saja pembahasannya di sini.</p>\n<p>Sekarang, saya akan membahas file \"index.js\".</p>\n<p>Di bagian ini, kita meng-import modul yang dibutuhkan:</p>\n<pre class=\"language-javascript line-numbers\"><code>// begin: import modules\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// end: import modules</code></pre>\n<p>Hanya app dan BrowserWindow saja yang dibutuhkan, karena loadURL adalah salah satu method dari BrowserWindow.</p>\n<p>Di bagian ini, kita menggunakan variabel bernama win untuk menyimpan objek BrowserWindow:</p>\n<pre class=\"language-javascript line-numbers\"><code>// buat variabel win untuk menyimpan objek BrowserWindow\nlet win;</code></pre>\n<p>Dan saat app ready:</p>\n<pre class=\"language-javascript line-numbers\"><code>// ketika app ready\napp.on('ready', () =&gt; {\n    // buat BrowserWindow\n    win = new BrowserWindow();</code></pre>\n<p>Buat BrowserWindow, kemudian assign ke variabel bernama win tadi.</p>\n<p>Selanjutnya:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di web\n    // win.loadURL(\"https://duckduckgo.com\");\n\n    // load dengan input URL di file lokal\n    win.loadURL(`file:///${__dirname}/index.html`);</code></pre>\n<p>Buka file \"index.html\".</p>\n<p>Catat bahwa duckduckgo tidak akan dibuka karena kodenya di-comment.</p>\n<p>Untuk membuka duckduckgo, uncomment dulu bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di web\n    // win.loadURL(\"https://duckduckgo.com\");</code></pre>\n<p>Dan comment bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di file lokal\n    win.loadURL(`file:///${__dirname}/index.html`);</code></pre>\n<p>Sehingga hasilnya jadi terbalik:</p>\n<pre class=\"language-javascript line-numbers\"><code>    // load dengan input URL di web\n    win.loadURL(\"https://duckduckgo.com\");\n\n    // load dengan input URL di file lokal\n    // win.loadURL(`file:///${__dirname}/index.html`);</code></pre>\n<p>Menurut dokumentasinya, ada beberapa parameter yang bisa diberikan pada method loadURL:</p>\n<ul>\n<li>url: string berisi path dari halaman web. bisa berupa file lokal maupun remote dengan protokol http atau https seperti yang telah dijelaskan sebelumnya</li>\n<li>options yang berupa objek ber-property:\n<ul>\n<li>httpReferrer: referrer dari pembuka halaman.</li>\n<li>userAgent: user agent dari pembuka halaman.</li>\n<li>extraHeaders: http header tambahan saat halaman web dibuka</li>\n<li>postData: untuk membuka url dengan method POST.</li>\n<li>baseURLForDataURL: base URL untuk file yang akan di-load oleh data URL.</li>\n</ul>\n</li>\n</ul>\n<h2>Penutup</h2>\n<p>Sekarang, Anda sudah tahu tentang loadURL.</p>\n<p>Bahwa loadURL bisa digunakan untuk membuka URL remote maupun file lokal.</p>\n<p>Bahwa loadFile bisa menggantikan loadURL untuk membuka file lokal.</p>\n<p>Saran saya, jika Anda menggunakan versi Electron terbaru, gunakan loadFile saja untuk membuka HTML karena lebih rapi.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-22T02:44:57+07:00",
            "date_modified": "2023-11-25T00:31:52+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-browserwindow.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-pembahasan-tentang-browserwindow.html",
            "title": "Belajar Electron - Pembahasan tentang BrowserWindow",
            "summary": "Pendahuluan Di Electron, BrowserWindow adalah komponen utama. Dengan BrowserWindow, kita bisa membuka file HTML berisi HTML tag, CSS, dan JavaScript untuk membentuk sebuah tampilan GUI yang kaya. File HTML, CSS, dan JavaScript yang dibuka bisa bersumber dari file lokal maupun remote via URL. Artinya, secara&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Di Electron, BrowserWindow adalah komponen utama.</p>\n<p>Dengan BrowserWindow, kita bisa membuka file HTML berisi HTML tag, CSS, dan JavaScript untuk membentuk sebuah tampilan GUI yang kaya.</p>\n<p>File HTML, CSS, dan JavaScript yang dibuka bisa bersumber dari file lokal maupun remote via URL.</p>\n<p>Artinya, secara teoritis, dengan BrowserWindow kita bisa membuka situs WhatsApp web, kemudian memodifikasinya di Electron.</p>\n<p>Entah itu dengan melakukan injeksi JavaScript tambahan atau yang lainnya.</p>\n<p>Hal tersebut sangat menguntungkan pengguna Electron, karena mereka memiliki peluang untuk membuat bot dengan lebih mudah.</p>\n<p>BrowserWindow juga memiliki parameter yang disebut web preferences saat objek BrowserWindow dibuat.</p>\n<p>Dengan web preferences tadi, kita bisa menentukan apakah modul dari Node.js yang ada di dalam Electron bisa digunakan di dalam JavaScript-nya HTML yang dimuat.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Membuat BrowserWindow kosong.</li>\n<li>Membahas BrowserWindow lebih dalam lagi.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Untuk membuat BrowserWindow di tutorial ini, caranya sama dengan <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">yang ini</a>.</p>\n<p>Di sini lebih dominan ke pembahasan BrowserWindow.</p>\n<p>Kode yang digunakan dalam tutorial ini sama dengan tutorial tersebut dengan beberapa tambahan.</p>\n<h2>Pembahasan</h2>\n<p>Terakhir kali kita membuat project Electron, kita telah memiliki kode ini, bukan?</p>\n<pre class=\"language-javascript line-numbers\"><code>// mulai: meng-import module\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// selesai: meng-import module\n\n// buat variabel untuk menyimpan BrowserWindow, namanya adalah \"win\".\nlet win;\n\n// saat app ready...\napp.on('ready', () =&gt; {\n    // buat objek BrowserWindow, dengan begini window kosong akan tampil.\n    win = new BrowserWindow();\n});</code></pre>\n<p>Pada bagian ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// mulai: meng-import module\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// selesai: meng-import module</code></pre>\n<p>Kita meng-import modul-modul yang dibutuhkan untuk menjalankan BrowserWindow.</p>\n<p>Baik app dan BrowserWindow sebenarnya diimport dari package bernama electron yang telah kita npm install sebelumnya.</p>\n<p>Package tersebut diinstall dengan parameter --save-dev agar saat release tidak disertakan.</p>\n<p>Tapi anehnya, jika saat release package electron tidak disertakan, bagaimana aplikasinya bisa berjalan?</p>\n<p>Hal itu disebabkan karena saat melakukan build aplikasi electron dari kode ke paket siap release, kita akan meng-embed script buatan kita dalam package electron tersebut.</p>\n<p>Jadi, saat melakukan build, mindset-nya adalah bukan script yang meng-include electron, tapi electron-lah yang meng-include script custom kita.</p>\n<p>Beda dengan saat development.</p>\n<p>Saat development, kita tidak ter-include dalam electron, karena kita hanya menggunakan NPM.</p>\n<p>Dengan NPM kita meminjam paket electron yang ada di dalam node_modules untuk menjalankan script kita yang custom itu.</p>\n<p>Sekarang jelaslah kenapa kita menggunakan parameter --save-dev saat melakukan npm install electron.</p>\n<p>Sekarang, perhatikan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// saat app ready...\napp.on('ready', () =&gt; {\n    // buat objek BrowserWindow, dengan begini window kosong akan tampil.\n    win = new BrowserWindow();\n});</code></pre>\n<p>Di kode tadi, kita membuat BrowserWindow dengan parameter default.</p>\n<p>Sebenarnya itu bisa diisi dengan yang lain.</p>\n<p>Seperti ini misalnya:</p>\n<pre class=\"language-javascript line-numbers\"><code>new BrowserWindow({\n            parent: null,\n            modal: false,\n            title: \"Aplikasi Saya\",\n            titleBarStyle: \"default\",\n            frame: true,\n            show: false,\n            width: 800,\n            height: 600,\n            minWidth: 800,\n            minHeight: 600,\n            webPreferences: {\n                webviewTag: true,\n                enableRemoteModule: true,\n                nodeIntegration: true,\n                contextIsolation: false\n            }\n        });</code></pre>\n<p>Menurut dokumentasinya, beberapa parameter ada pada constructornya.</p>\n<p>Berikut ini adalah sebagian penjelasannya berdasarkan dokumentasi Electron:</p>\n<ul>\n<li>parent: apakah browser window ini memiliki parent. ini sangat berpengaruh saat kita menjadikan browser window sebagai modal window. jika parent tidak null maka child akan menghalangi parent saat window child tampil.</li>\n<li>modal: apakah browser window ini modal. modal artinya, saat parent dari modal tidak null, maka saat child tampil, ia akan menghalangi akses ke parent-nya.</li>\n<li>title: judul yang ada pada title bar window</li>\n<li>titleBarStyle: style dari title bar</li>\n<li>frame: apakah memiliki frame atau frameless. jika true maka memiliki frame.</li>\n<li>show: apakah window ditampilkan saat dibuat.</li>\n<li>width: lebar window dalam pixel.</li>\n<li>height: tinggi window dalam pixel.</li>\n<li>minWidth: lebar minimum window dalam pixel. minHeight tinggi minimum window dalam pixel.</li>\n<li>webPreferences: setting untuk fitur dari web page yang di-load. ini berupa objek.</li>\n<li>webPreferences.webviewTag: apakah tag di-enable.</li>\n<li>webPreferences.enableRemoteModule: apakah remote module di-enable. sudah kadaluwarsa di versi 14.</li>\n<li>webPreferences.nodeIntegration: apakah node integration di-enable.</li>\n<li>webPreferences.contextIsolation: apakah context isolation di-enable. jadi, apakah preload script dan Electron internal logic dijalankan dalam context terpisah.</li>\n</ul>\n<p>Perlu diingat bahwa parameter-parameter tersebut dapat berubah seiring adanya update pada framework Electron. Jadi, sering-seringlah mengecek dokumentasinya.</p>\n<p>Selain itu, perlu diingat juga bahwa BrowserWindow hanya bisa digunakan setelah app mengirimkan event ready.</p>\n<h2>Penutup</h2>\n<p>Sekarang, Anda telah dijelaskan mengapa saat meng-install package electron parameter --save-dev diberikan.</p>\n<p>Selain itu, Anda juga sudah dijelaskan bahwa BrowserWindow dapat menerima beberapa parameter seperti web preferences dan lain-lain.</p>\n<p>Saran saya, cobalah bereksperimen dengan menerapkan parameter-parameter tadi di project Anda dan lihat hasilnya.</p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-21T15:50:16+07:00",
            "date_modified": "2023-11-25T00:31:58+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-cara-menggunakan-jquery.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-cara-menggunakan-jquery.html",
            "title": "Belajar Electron - Cara Menggunakan jQuery",
            "summary": "Pendahuluan jQuery adalah library JavaScript yang memudahkan kita untuk menangani DOM. Penggunaan jQuery di website atau aplikasi web normal adalah sangat mudah. Lalu bagaimana dengan penggunaannya di Electron? Ternyata memerlukan sedikit trik. Tujuan dari tutorial ini adalah: Prasyarat dari tutorial ini adalah: Pertama, buatlah project&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>jQuery adalah library JavaScript yang memudahkan kita untuk menangani DOM.</p>\n<p>Penggunaan jQuery di website atau aplikasi web normal adalah sangat mudah.</p>\n<p>Lalu bagaimana dengan penggunaannya di Electron?</p>\n<p>Ternyata memerlukan sedikit trik.</p>\n<h2>Tujuan</h2>\n<p>Tujuan dari tutorial ini adalah:</p>\n<ul>\n<li>Pembaca mampu menggunakan jQuery pada renderer process Electron.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Prasyarat dari tutorial ini adalah:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Telah meng-install Node.js dan NPM dan mampu menjalankannya dari folder manapun.</li>\n<li>Telah membaca dan memahami <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">cara pembuatan project Electron</a>.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Pertama, buatlah project Electron bernama \"project-electron-jquery\" berdasarkan <a href=\"https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html\">tutorial ini</a>.</p>\n<p>Sampai di sini, kita sudah punya file \"index.js\". Buka file tersebut kemudian isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// file: index.js\n\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n\nlet win;\n\napp.on('ready', () =&gt; {\n    // gunakan webPreferences ini.\n    // jika versi electronnya beda, mungkin beda caranya juga.\n    // jadi, jika gagal silakan cek di dokumentasinya.\n    win = new BrowserWindow({\n        webPreferences: {\n            contextIsolation: false,\n            enableRemoteModule: true,\n            nodeIntegration: true\n        }\n    });\n\n    win.loadURL(`file:///${__dirname}/index.html`);\n});</code></pre>\n<p>Selanjutnya, buat file \"renderer.js\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>$(document).ready(function () {\n    alert(\"Hello World!\")\n});</code></pre>\n<p>Kemudian, buat file \"index.html\" dan isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;!-- file: index.html --&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Import JQuery&lt;/h1&gt;\n    &lt;script&gt;\n        // cara mengimpor jQuery di Electron\n        window.jQuery = require(\"./jquery.min.js\"); // require\n        window.$ = window.jQuery; // assign\n    &lt;/script&gt;\n    &lt;script src=\"renderer.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\n<p>Selanjutnya, download jQuery yang sudah di-minified <a href=\"https://code.jquery.com/jquery-3.7.1.min.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dari website resminya</a>.</p>\n<p>Setelah selesai di-download masukkan file script jQuery tadi ke dalam folder project ini dan rename menjadi \"jquery.min.js\" jika namanya belum seperti itu.</p>\n<p>Sekarang, jalankan Electron dengan:</p>\n<pre>npm run dev</pre>\n<p>Nanti, akan muncul popup bertuliskan \"Hello World\".</p>\n<p>Itu tandanya bahwa Anda berhasil menggunakan jQuery di Electron.</p>\n<h2>Pembahasan</h2>\n<p>Sebenarnya, jika dibahas semuanya, maka tutorial ini akan melebar.</p>\n<p>Karena menyangkut BrowserWindow, loadURL dan lain-lain yang akan dijelaskan pada tutorial-tutorial selanjutnya.</p>\n<p>Jadi, di sini saya hanya membahas ini:</p>\n<pre class=\"language-html line-numbers\"><code>    &lt;script&gt;\n        // cara mengimpor jQuery di Electron\n        window.jQuery = require(\"./jquery.min.js\"); // require\n        window.$ = window.jQuery; // assign\n    &lt;/script&gt;</code></pre>\n<p>Dan ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>    win = new BrowserWindow({\n        webPreferences: {\n            contextIsolation: false,\n            enableRemoteModule: true,\n            nodeIntegration: true\n        }\n    });</code></pre>\n<p>Bahwa itulah dua blok kode yang digunakan saat Anda ingin menggunakan jQuery di Electron.</p>\n<p>Sementara telan saja dulu cara tersebut. </p>\n<p>Mungkin setelah Anda membaca tutorial-tutorial selanjutnya, Anda akan lebih paham.</p>\n<h2>Penutup</h2>\n<p>Sekarang, Anda telah tahu cara menggunakan jQuery di Electron.</p>\n<p>Harap ingat baik-baik cara ini karena kemungkinan tutorial ke depannya akan banyak menggunakan jQuery.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-21T12:11:00+07:00",
            "date_modified": "2023-11-25T00:31:38+07:00"
        },
        {
            "id": "https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html",
            "url": "https://electron.rakifsul.my.id/belajar-electron-cara-membuat-project.html",
            "title": "Belajar Electron - Cara Membuat Project",
            "summary": "Pendahuluan Electron atau Electron js adalah sebuah framework aplikasi desktop yang menggunakan bahasa JavaScript. Electron dapat digunakan untuk membuat aplikasi Windows, Mac OS dan Linux dengan tampilan yang dirancang dengan teknologi HTML, CSS, dan JavaScript. Walaupun aplikasi yang dihasilkan oleh framework itu memiliki ukuran yang&hellip;",
            "content_html": "<h2>Pendahuluan</h2>\n<p>Electron atau Electron js adalah sebuah framework aplikasi desktop yang menggunakan bahasa JavaScript.</p>\n<p>Electron dapat digunakan untuk membuat aplikasi Windows, Mac OS dan Linux dengan tampilan yang dirancang dengan teknologi HTML, CSS, dan JavaScript.</p>\n<p>Walaupun aplikasi yang dihasilkan oleh framework itu memiliki ukuran yang cukup besar, framework itu sebenarnya sangat memudahkan kita untuk membuat aplikasi bot.</p>\n<p>Hal itu disebabkan bahwa Electron sebenarnya adalah web browser, tapi dapat dijadikan aplikasi standalone.</p>\n<p>Pada tutorial kali ini, saya akan membahas cara membuat project Electron dari nol.</p>\n<h2>Tujuan</h2>\n<p>Berikut ini adalah tujuan tutorial ini:</p>\n<ul>\n<li>Mampu membuat project Electron.</li>\n<li>Mampu memunculkan BrowserWindow kosong.</li>\n</ul>\n<h2>Prasyarat</h2>\n<p>Untuk memulai, sebelumnya Anda harus:</p>\n<ul>\n<li>Menggunakan sistem operasi Windows 10 ke atas.</li>\n<li>Men-download dan meng-install Node.js dan NPM.</li>\n<li>Bisa meng-akses Node.js dan NPM dari PowerShell di folder manapun.</li>\n</ul>\n<h2>Langkah-Langkah</h2>\n<p>Setelah semua prasyarat terpenuhi, sekarang saatnya untuk memulai.</p>\n<h3>1. Melakukan NPM Init (Sebagai Inisialisasi)</h3>\n<p>Pertama, buatlah sebuah folder di manapun dengan nama \"project-electron-create\".</p>\n<p>Namanya sebenarnya bebas, tapi di tutorial ini saya sarankan untuk mengikuti saya agar tidak bingung.</p>\n<p>Selanjutnya masuklah ke dalam folder tersebut dengan PowerShell:</p>\n<pre>cd project-electron-create</pre>\n<p>Sekarang, Anda sudah berada di dalam folder \"project-electron-create\".</p>\n<p>Lanjut, jalankan perintah ini:</p>\n<pre>npm init -y</pre>\n<p>Setelah menjalankan perintah tadi, akan muncul file \"package.json\" di folder \"project-electron-create\":</p>\n<pre class=\"language-json line-numbers\"><code>{\n  \"name\": \"project-electron-create\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}</code></pre>\n<h3>2. Mengubah File \"package.json\"</h3>\n<p>Sekarang, ubah \"package.json\" menjadi seperti ini:</p>\n<pre class=\"language-json line-numbers\"><code>{\n  \"name\": \"project-electron-create\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}</code></pre>\n<h3>3. Meng-install Package Electron</h3>\n<p>Sekarang, kembali buka PowerShell jika belum terbuka di folder \"project-electron-create\".</p>\n<p>Kemudian, jalankan perintah ini:</p>\n<pre>npm install electron --save-dev</pre>\n<p>Perintah tadi akan men-download package electron dan menyimpannya di dalam folder \"node_modules\".</p>\n<p>Parameter --save-dev menunjukkan bahwa dependency tersebut hanya digunakan selama development.</p>\n<p>Artinya, jika Anda telah men-deploy aplikasi ini, electron tidak akan disertakan dalam folder \"node_modules\".</p>\n<p>Setelah itu dilakukan, sekarang \"package.json\" akan menjadi seperti ini:</p>\n<pre class=\"language-json line-numbers\"><code>{\n  \"name\": \"project-electron-create\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"electron .\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"electron\": \"^27.1.0\"\n  }\n}</code></pre>\n<p>Lihat property \"devDependencies\". </p>\n<p>Di sana ada entry bernama electron.</p>\n<p>Jika tadi Anda tidak menggunakan parameter --save-dev pada npm install-nya, maka dia akan ada di property \"dependencies\".</p>\n<h3>4. Membuat File \"index.js\" dan Mengisinya dengan Kode</h3>\n<p>Sekarang, buatlah file baru bernama \"index.js\" di dalam folder \"project-electron-create\".</p>\n<p>Setelah dibuat, isi dengan kode ini:</p>\n<pre class=\"language-javascript line-numbers\"><code>// mulai: meng-import module\nconst {\n    app,\n    BrowserWindow\n} = require('electron');\n// selesai: meng-import module\n\n// buat variabel untuk menyimpan BrowserWindow, namanya adalah \"win\".\nlet win;\n\n// saat app ready...\napp.on('ready', () =&gt; {\n    // buat objek BrowserWindow, dengan begini window kosong akan tampil.\n    win = new BrowserWindow();\n});</code></pre>\n<p>Perhatikan baik-baik komentar kode yang saya tulis, karena menurut saya itu cara terbaik untuk menjelaskan kode.</p>\n<h3>5. Menjalankan Aplikasi Electron</h3>\n<p>Sekarang kita siap untuk mencoba aplikasi ini.</p>\n<p>Pastikan Anda telah membuka PowerShell dan berada di dalam folder \"project-electron-create\".</p>\n<p>Sekarang, jalankan:</p>\n<pre>npm run dev</pre>\n<p>Nanti akan muncul sebuah Window kosong.</p>\n<p>Window tersebut dinamakan BrowserWindow.</p>\n<p>Itu adalah bagian paling mendasar dalam GUI Electron.</p>\n<p>Di dalam window tersebut, kita akan bisa mengisinya dengan HTML, CSS, dan JavaScript untuk membentuk tampilan yang bagus dan modern.</p>\n<h2>Penutup</h2>\n<p>Sekarang, Anda sudah tahu cara membuat project Electron.</p>\n<p>Aplikasi yang saya buat tadi adalah salah satu contoh aplikasi Electron yang paling sederhana.</p>\n<p>Intinya, Anda harus membuat BrowserWindow.</p>\n<p>Nanti, BrowserWindow tersebut bisa membuka file HTML baik secara lokal maupun dari remote address yang artinya tampilannya akan muncul.</p>\n<p>Jika Anda ingin langsung mencoba project di tutorial ini, beli paket source code nya di:</p>\n<p><a href=\"https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://karyakarsa.com/rakifsul/paket-project-electron-dasar-2023-11-24</a></p>\n<p> </p>\n<p> </p>",
            "author": {
                "name": "RAKIFSUL"
            },
            "tags": [
                   "Dasar"
            ],
            "date_published": "2023-11-21T00:05:13+07:00",
            "date_modified": "2023-11-25T00:32:11+07:00"
        }
    ]
}
